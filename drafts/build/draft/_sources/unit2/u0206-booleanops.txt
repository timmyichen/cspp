.. qnum::
   :start: 1
   :prefix: ch0206-

Lesson 02-06: Boolean Operators
===============================

**Learning Target: I can use boolean operators to compare values**

Comparison Operators
--------------------

Now that we've famliarized ourselves with the basic boolean operators, let's dive a little bit deeper.  These next set of boolean operators will enable us to compare values.  These operators are:

   +--------------------------+----------+
   | Description              | Operator |
   +==========================+==========+
   | Equals                   | ``==``   |
   +--------------------------+----------+
   | Not Equals               | ``!=``   |
   +--------------------------+----------+
   | Greater Than             | ``>``    |
   +--------------------------+----------+
   | Less Than                | ``<``    |
   +--------------------------+----------+
   | Greater Than or Equal to | ``>=``   |
   +--------------------------+----------+
   | Less Than or Equal to    | ``<=``   |
   +--------------------------+----------+

With the exception of ``==`` and ``!=``, these operators should seem fairly familiar - you probably encountered them in your math class when discussing *inequalities*.  

You may be wondering why the "equals to" is two equal signs instead of one.  Pop quiz!

.. mchoice:: cfu_boolops_1
   :correct: b
   :answer_a: equals to
   :answer_b: variable assignment
   :answer_c: mathematical equation
   :feedback_a: Remember - equals to is a double equal sign!
   :feedback_b: Nice job!
   :feedback_c: Remember to think in the context of python code.  When would you see an equal sign?
   
   What does a single equal sign mean in Python?
   
Recall that a single equal sign indicates that *some value* is being saved into *some variable*.  Therefore, the computer needs a way to differentiate between variable assignment and "equals to" - so "equals to" is ``==``.

Note that while you can compare strings using ``>`` and ``<``, we will not be covering it in this book.

Examples
--------

Basic Examples
~~~~~~~~~~~~~~

Try to look through every example and make sure that you understand each one:

.. activecode:: ex_boolops_1
   :nocodelens:
   :autorun:

   print(3 > 5) # ==> false
   print(10 < 15) # ==> true
   print(5 >= 5) # ==> true
   print(6 >= 5) # ==> true
   print("hello" == "hello") # ==> true
   print("abc" != "abc") # ==> true

Special Examples
~~~~~~~~~~~~~~~~

These examples cover some special cases that may not be thought about:

.. activecode:: ex_booloops_2
   :nocodelens:
   :autorun:
   
   print(13.0000 == 13) # ==> true (example 1)
   print(14 > 10 + 2) # ==> true (example 2)
   print("hehehe" == "he" * 3) # ==> true (example 3)
   print(13 == "13") # ==> false (example 4)
   print(1 < 2 < 3) # ==> true (example 5)
   print(1 == 1 and False) ==> false (example 6)

Example 1 + 2
`````````````

::
   
   print(13.0000 == 13)

Although the left side is a float and the right side is an integer, it still prints ``True`` because their values are compared.  